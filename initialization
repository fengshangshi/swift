


// 初始化

// 为存储属性设置初始化值
// 初始化器
struct Fahrenheit {
    var temperature: Double = 32.0
//    init() {
//        temperature = 32.0
//    }
}
var f = Fahrenheit()
print("The default temperature is \(f.temperature)° Fahrenheit")


// 初始化形式参数
//
//struct Celsius {
//    var temperatureInCelsius: Double
//    init(fromFahrenheit fahrenheit: Double) {
//        temperatureInCelsius = (fahrenheit - 32.0) / 1.8
//    }
//    init(fromKelvin kelvin: Double) {
//        temperatureInCelsius = kelvin - 273.15
//    }
//}
//let boilingPointOfWater = Celsius(fromFahrenheit: 212.0)
//boilingPointOfWater.temperatureInCelsius
//let freezingPointOfWater = Celsius(fromKelvin: 273.15)
//freezingPointOfWater.temperatureInCelsius



// 形式参数名和实际参数标签
struct Color {
    let red, green, blue: Double
    init(red: Double, green: Double, blue: Double) {
        self.red = red
        self.green = green
        self.blue = blue
    }
    init(white: Double) {
        red = white
        green = white
        blue = white
    }
}
let magenta = Color(red: 1.0, green: 0.0, blue: 1.0)
let halfGray = Color(white: 0.5)

// 无实际参数标签的初始化器形式参数
struct Celsius {
    var temperatureInCelsius: Double
    init(fromFahrenheit fahrenheit: Double) {
        temperatureInCelsius = (fahrenheit - 32.0) / 1.8
    }
    init(fromKelvin kelvin: Double) {
        temperatureInCelsius = kelvin - 273.15
    }
    init(_ celsius: Double) {
        temperatureInCelsius = celsius
    }
}
let bodyTemperature = Celsius(37.0)




// 可选属性类型
class SurveyQuestion {
    var text: String
    var response: String?
    init(text: String) {
        self.text = text
    }
    func ask() {
        print(text)
    }
}
let cheeseQuestion = SurveyQuestion(text: "Do you like cheese?")
cheeseQuestion.ask()
cheeseQuestion.response = "Yes, I do like cheese"
//cheeseQuestion.response = "No, thanks"
//cheeseQuestion.response

let beetsQuestion = SurveyQuestion(text: "How about beets?")
beetsQuestion.ask()
beetsQuestion.response = "I also like beets.(But not with cheese.)"





// 默认初始化器
//class ShoppingListItem {
//    var name: String?
//    var quantity = 1
//    var purchased = false
//}
//var item = ShoppingListItem()
//item.name
//item.purchased
//item.quantity


// 结构体类型的成员初始化器
//struct Size {
//    var width = 0.0, height = 0.0
//}
//let twoByTwo = Size(width: 2.0, height: 2.0)
//let alsoTwoByTwo = Size()


// 值类型的初始化器委托
// 初始化器可以调用其他初始化器来执行部分实例的初始化，这个过程，就是所谓的初始化器委托，避免了多个初始化器里的龙域代码

// 初始化器委托的运作，以及允许哪些形式的委托，这些规则对于值类型和类类型是不同的。值类型（结构体和枚举）不支持继承，所以他们的初始化器委托的过程相当简单，因为他们只能提供他们自己为另一个初始化器委托。因为类可以从其他类继承，这就意味着类有额外的责任来确保他们继承的所有存储属性在初始化期间都分配了一个合适的值。


struct Size {
    var width = 0.0, height = 0.0
}

struct Point {
    var x = 0.0, y = 0.0
}

struct Rect {
    var origin = Point()
    var size = Size()
    
    init() {}
    init(origin: Point, size: Size) {
        self.origin = origin
        self.size = size
    }
    init(center: Point, size: Size) {
        let originX = center.x - (size.width / 2)
        let originY = center.y - (size.height / 2)
        self.init(origin: Point(x: originX, y: originY), size: size)
    }
}

let basicRect = Rect()
basicRect.origin.x
basicRect.origin.y
basicRect.size.height
basicRect.size.width

let originRect = Rect(origin: Point(x: 2.0, y: 2.0), size: Size(width: 5.0, height: 5.0))
originRect.origin.x
originRect.origin.y
originRect.size.height
originRect.size.width

let centerRect = Rect(center: Point(x: 4.0, y: 4.0), size: Size(width: 3.0, height: 3.0))
centerRect.origin.x
centerRect.origin.y
centerRect.size.height
centerRect.size.width



// 类的继承和初始化
// 所有类的存储属性--包括从它的父类继承的所有属性，都必须在初始化期间分配初始值
// swift为类类型定义了两种初始化器以确保所有的存储属性接收一个初始值，这些就是所谓的指定初始化器和便捷初始化器

// 指定初始化器和便捷初始化器语法
/*
 指定初始化器
 init(parameters) {
    statements
 }
 
 便捷初始化器
 convenience init(parameters) {
    statements
 }
 */


// 类类型的初始化器委托
/* 为了简化指定和便捷初始化器之间的调用关系，swift在初始化器之间的委托调用有下面的三个规则
 规则1
 指定初始化器必须从它的直系父类调用指定初始化器
 
 规则2
 便捷初始化器必须从相同的类里调用另一个初始化器
 
 规则3
 便捷初始化器最终必须调用一个指定初始化器
 
 指定初始化器必须总是向上委托
 便捷初始化器必须总是横向委托

*/

// 两段式初始化
/*
 swif的类初始化是一个两段式过程：
 在第一个阶段，每一个存储属性被引入类，并分配一个初始值。
 第二个阶段是在每个存储属性的初始状态被确定之后开始，每个类都有机会在新的实例准备使用之前来定制它的存储属性。
 两段式初始化过程可以防止属性值在初始化之前被访问，还可以防止属性值被另一个初始化器以外的赋予不同的值。
 */


/*
 swift编译器执行四种有效的安全检查来确保两段式初始化过程能够顺利完成。
 安全检查1
    指定初始化器必须保证在向上委托给父类初始化器之前，其所在类引入的所有属性都要初始化完成。一个对象的内存只有在其所有存储型属性确认之后才能完全初始化，为了满足这一条规则，指定初始化器必须保证它自己的属性在它上交委托之前先完成初始化。
 
 安全检查2
    指定初始化器必须先向上委托父类初始化器，然后才能为继承的属性设置新值，如果不这样做，指定初始化器赋予的新值将被父类中的初始化器所覆盖
 
 安全检查3
    便捷初始化器必须先委托同类中的其他初始化器，然后再为任意属性赋新值，包括同类里定义的属性，如果没有这样做，便捷初始化器的新值将被自己同类中其他指定初始化器所覆盖
 
 安全检查4
    初始化器在第一阶段初始化完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用self作为值。直到第一阶段结束，类实例才完全合法，属性只能被读取，方法也只能被调用，直到第一阶段结束的时候，这个类实例才被看做是合法的。
 
 以下是两段初始化过程，基于上述四种检查的流程：
 
 阶段1
 指定或便捷初始化器在勒种被调用
 为这个类的新实例分配内存，内存还没有被初始化
 这个类的指定初始化器确保所有由此类引入的存储属性都有一个值，现在这些存储属性的内存被初始化了
 指定初始化器上交父类的初始化器为其存储属性执行相同的任务
 这个调用父类初始化器的过程讲演者初始化器链一直向上进行，直到到达初始化器链的最顶部
 一旦到达了初始化器的最顶部，在链顶部的类确保所有的存储属性都有一个值，此实例的内存被认为完全初始化了，此时第一阶段完成
 
 阶段2
 从顶部初始化器往下，链中的每一个指定初始化器都有机会进一步定制实例。初始化器现在能够访问self并且可以修改它的属性，调用它的实例方法等
 最终，链中任何便捷初始化器都有机会定制实例以及使用self。
 */




// 初始化器的继承和重写
class Vehicle {
    var numberOfWheels = 0
    var description: String {
        return "\(numberOfWheels) wheel(s)"
    }
}
let vehicle = Vehicle()
print("Vehicle: \(vehicle.description)")


class Bicycle: Vehicle {
    override init() {
        super.init()
        numberOfWheels = 2
    }
}
let bicycle = Bicycle()
print("Bicycle: \(bicycle.description)")




// 自动初始化器的继承 - 在特定情况下父类初始化器是可以被自动继承的。
/*
 假设子类中引入的任何新的属性都提供了默认值，请遵守以下2个规则：

 规则1
 如果你的子类没有定义任何指定初始化器，它会自动继承父类所有的指定初始化器
 
 规则2
 如果你的子类提供了所有父类指定初始化器的实现-要么是通过规则1继承来的，要么通过在定义中提供自定义实现的，那么他自动继承所有的父类便捷初始化器
 
 就算你的子类添加了更多的便捷初始化器，这些规则仍然使用。
 */


// 指定和便捷初始化器的操作
class Food {
    var name: String
    init(name: String) {
        self.name = name
    }
    convenience init() {
        self.init(name: "[Unnamed]")
    }
}
let namedMeat = Food(name: "Bacon")
let mysteryMeat = Food()
mysteryMeat.name
namedMeat.name

class RecipeIngredient: Food {
    var quantity: Int
    init(name: String, quantity: Int) {
        self.quantity = quantity
        super.init(name: name) // 委托父类指定初始化器
    }
    override convenience init(name: String) {
        self.init(name: name, quantity: 1) // 委托当前类指定初始化器
    }
}
let oneMysteryItem = RecipeIngredient()
oneMysteryItem.name
oneMysteryItem.quantity
let oneBacon = RecipeIngredient(name: "Bacon")
oneBacon.name
oneBacon.quantity
let sixEggs = RecipeIngredient(name: "Eggs", quantity: 6)
sixEggs.name
sixEggs.quantity


class ShoppingListItem: RecipeIngredient {
    var purchased = false // 自己引入的所有属性提供了一个默认值，自己没有定义任何初始化器，会自动从父类继承所有的指定和便捷初始化器
    var description: String {
        var output = "\(quantity) x \(name)"
        output += purchased ? " ✔" : " ✘"
        return output
    }
}

var breakfastList = [
    ShoppingListItem(),
    ShoppingListItem(name: "Bacom"),
    ShoppingListItem(name: "Eggs", quantity: 6),
]
breakfastList[0].name = "Orange juice"
breakfastList[0].purchased = true

breakfastList[1].purchased = true
for item in breakfastList {
    print(item.description)
}


// 可失败初始化器 init?
struct Animal {
    let species: String
    init?(species: String) {
        if species.isEmpty { return nil }
        self.species = species
    }
}
let someCreature = Animal(species: "Giraffe")
if let giraffe = someCreature {
    print("An animal was initialized with a species of \(giraffe.species)")
}


let anonymousGreature = Animal(species: "")
if anonymousGreature == nil {
    print("The anonymous creature could not be initialized")
}


// 枚举的可失败初始化器
//enum TemperatureUnit {
//    case Kelvin, Celsius, Fahrenheit
//    init?(symbol: Character) {
//        switch symbol {
//        case "K":
//            self = .Kelvin
//            
//        case "C":
//            self = .Celsius
//            
//        case "F":
//            self = .Fahrenheit
//            
//        default:
//            return nil
//        }
//    }
//}
//
//let fahrenheitUnit = TemperatureUnit(symbol: "F")
//if fahrenheitUnit != nil {
//    print("This is a defined temperature unit, so initialization succeeded.")
//}
//
//let unknownUnit = TemperatureUnit(symbol: "X")
//if unknownUnit == nil {
//    print("This is not a defined temperature unit, so initialization failed.")
//}


// 带有原始值枚举的可失败初始化器
//带有原始值的枚举会自动获得可失败的初始化器init?(rawValue:),该可失败初始化器接收一个名为rawValue的合适的原始值类型参数，如果找到了匹配的枚举情况就选择其一，或者没有找到匹配的值就出发初始化失败


enum TemperatureUnit: Character {
    case Kelvin = "K", Celsius = "C", Fahrenheit = "F"
}
let fahrenheitUnit = TemperatureUnit(rawValue: "F")
if fahrenheitUnit != nil {
    print("This is a defined temperature unit, so initialization succeeded.")
}

let unknownUnit = TemperatureUnit(rawValue: "X")
if unknownUnit == nil {
    print("This is not a defined temperature unit, so initialization failed.")
}


// 初始化失败的传递
// 类、结构体或枚举的可失败初始化器可以横向委托到同一个类，结构体或枚举里的另一个可失败初始化器，类似的，子类的可失败初始化器可以向上委托到父类的可失败初始化器。
// 无论哪种情况，如果你委托到另一个初始化器导致了初始化失败，那么整个初始化过程也会立即失败，并且之后任何初始化代码都不会执行。

class Product {
    let name: String
    init?(name: String) {
        if name.isEmpty { return nil }
        self.name = name
    }
}
class CartItem: Product {
    let quantity: Int
    init?(name: String, quantity: Int) {
        if quantity < 1 { return nil }
        self.quantity = quantity
        super.init(name: name)
    }
}

if let twoSocks = CartItem(name: "sock", quantity: 2) {
    print("Item: \(twoSocks.name), qunatity: \(twoSocks.quantity)")
}

if let zeroShirts = CartItem(name: "shirt", quantity: 0) {
    print("Item: \(zeroShirts.name), quantity: \(zeroShirts.quantity)")
} else {
    print("Unable to initialize zero shirts")
}

if let oneUnnamed = CartItem(name: "", quantity: 2) {
    print("Item: \(oneUnnamed.name), qunatity: \(oneUnnamed.quantity)")
} else {
   print("Unable to initialize unnamed product")
}

// 重写可失败初始化器
class Document {
    var name: String?
    
    init() {}
    
    init?(name:String) {
        self.name = name
        if name.isEmpty { return nil }
    }
}

class AutomaticallyNamedDocument: Document {
    override init() {
        super.init()
        self.name = "[Untitled nil]"
    }
    
    override init(name: String) {
        super.init()
        self.name = name.isEmpty ? "[Untitled]" : name
//        if name.isEmpty {
//            self.name = "[Untitled]"
//        } else {
//            self.name = name
//        }
    }
}

var automaticallyNamedDocument = AutomaticallyNamedDocument()
automaticallyNamedDocument.name
automaticallyNamedDocument = AutomaticallyNamedDocument(name: "")
automaticallyNamedDocument.name

// 可失败初始化器 init!


// 必要初始化器
class SomeClass {
    required init () {}
}

class SomeSubclass: SomeClass {
    required init () {} // 这里重新不用override关键字
}


// 通过闭包和函数来设置属性的默认值
struct Chessboard {
    let boardColors: [Bool] = {
        
        var temporaryBoard = [Bool]()
        var isBlack = false
        for i in 1...8 {
            for j in 1...8 {
                temporaryBoard.append(isBlack)
                isBlack = !isBlack
            }
            isBlack = !isBlack
        }
        return temporaryBoard
        
    }() // 闭包在这里的用法
    
    func squareIsBlackAt(row: Int, column: Int) -> Bool {
        return boardColors[(row * 8) + column]
    }
}
let board = Chessboard()
print(board.squareIsBlackAt(row: 0, column: 1))
print(board.squareIsBlackAt(row: 7, column: 7))








