

// 分多行
//enum CompassPoint {
//    case north
//    case south
//    case east
//    case west
//}
//
//// 同一行
////enum Planet {
////    case mercury, venus, earth, mars, jupiter, saturn, uranus, neptune
////}
//
//// 给枚举类型起一个单数的而不是复数的名字
////var directionToHead = CompassPoint.west
//var directionToHead: CompassPoint
//directionToHead = .west
//
//// 一旦以CompassPoint类型被声明，就可以使用点语法(.)把它设定成不同的CompassPoint值
//directionToHead = .east
//
//// switch
//directionToHead = .south
//switch directionToHead {
//case .north:
//    print("Lots of planets have a north")
//    
//case .south:
//    print("Watch out for penguins")
//    
//case .east:
//    print("Where the sun rises")
//    
//case .west:
//    print("Where the skies are blue")
//}


// switch需要全覆盖枚举成员，不能有省略和遗漏
// 如果不能为所有枚举成员提供一个case，可以提供default来包含那些不能被明确写出的成员
//let somePlanet = Planet.earth
//switch somePlanet {
//case .earth:
//    print("Mostly harmless")
//    
//default:
//    print("Not a safe place for humans")
//}


// 关联值
enum Barcode {
    case upc(Int, Int, Int, Int)
    case qrCode(String)
}

var productBarcode = Barcode.upc(8, 85909, 51226, 3)
//productBarcode = .qrCode("ABCDEFGHIJKLMNOP")

switch productBarcode {
// case .upc(let numberSystem, let manufacturer, let product, let check):
case let .upc(numberSystem, manufacturer, product, check):
    print("UPC: \(numberSystem), \(manufacturer), \(product), \(check)")
//case .qrCode(let productCode):
case let .qrCode(productCode):
    print("QR code: \(productCode)")
}

// 原始值
enum ASCIIControlCharacter: Character {
    case tab = "\t"
    case lineFeed = "\n"
    case carriageReturn = "\r"
}


// 隐式指定的原始值
// Int
enum Planet: Int {
    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune
}

// String
// 成员的名称就是这个成员的隐式原始值
enum CompassPoint: String {
    case north, south, east = "E", west
}

let earthsOrder = Planet.earth.rawValue // 这里依靠mercury=1推算出来的

let sunsetDirection = CompassPoint.west.rawValue //默认的隐式原始值
let eastDirection = CompassPoint.east.rawValue // 指定原始值


// 从原始值初始化
let possiblePlanet = Planet(rawValue: 7)



let positionToFind = 3
if let somePlanet = Planet(rawValue: positionToFind) {
    switch somePlanet {
    case .earth:
        print("Mostly harmless")
    default:
        print("Not a safe place for humans")
    }
} else {
    print("There isn't a planet at position \(positionToFind)")
}


// 递归枚举 不是很懂，还是应用场景问题，需要实际开发中注意
enum ArithmeticExpression {
    case number(Int)
    indirect case addition(ArithmeticExpression, ArithmeticExpression)
    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)
}

let five = ArithmeticExpression.number(5)
let four = ArithmeticExpression.number(4)
let sum = ArithmeticExpression.addition(five, four)
let product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))


func evaluate(_ expression: ArithmeticExpression) -> Int {
    switch expression {
    case let .number(value):
        return value
        
    case let .addition(left, right):
        return evaluate(left) + evaluate(right)
        
    case let .multiplication(left, right):
        return evaluate(left) * evaluate(right)
    }
}
print(evaluate(product))







