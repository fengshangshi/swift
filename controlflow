import UIKit

// for-in遍历范围
for index in 1...5 {
    print("\(index) times 5 is \(index * 5)")
}



// _代替变量名
let base = 3
let power = 10
var answer = 1

for i in 1...power {
    answer *= base
}
print("\(base) to the power of \(power) is \(answer)")


// 遍历数组
let names = ["Anna", "Alex", "Brain", "Jack"]
for name in names {
    print("Hello, \(name)!")
}


// 遍历字典
let numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]
for (animalName, legCount) in numberOfLegs {
    print("\(animalName)s have \(legCount) legs")
}


// while
let finalSquare = 25
var board = [Int](repeating: 0, count: finalSquare + 1)

board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08

board[03] == board[3]

board.count

var square = 0
var diceRoll = 0
var step = 0

while square < finalSquare {
    // 掷骰子，由随机数控制，0-6之间
    diceRoll = Int(arc4random_uniform(7))
    
    // 根据点数移动
    square += diceRoll
    
    // print("diceRoll = \(diceRoll), square = \(square), board[square] = \(square < board.count ? board[square] : 0)")

    if square < board.count {
        square += board[square]
    }
    
    step += 1
}
print("Game over! Step is \(step)")


var count = 0
for _ in 0...100 {
    if arc4random_uniform(7) == 0 {
        count += 1
        //print("随机数等于6")
    }
}
print("count is: \(count)")





// repeat-while/
square = 0
diceRoll = 0

board

repeat {
    square += board[square]
    
    diceRoll = Int(arc4random_uniform(7))
    square += diceRoll
    
} while square < finalSquare


// if

var temperatureInFahrenheit = 40
if temperatureInFahrenheit <= 32 {
    print("It's very cold. Consider wearing a scarf.")
} else {
    print("It's not that cold. Wear a t-shirt.")
}


temperatureInFahrenheit = 90
if temperatureInFahrenheit <= 32 {
    print("It's very cold. Consider wearing a scarf.")
} else if temperatureInFahrenheit >= 86 {
    print("It's really warm. Don't forget to wear sunscreen.")
} else {
    print("It's not that cold. Wear a t-shirt.")
}


// switch
var someCharacter: Character = "z"
switch someCharacter {
case "a":
    print("The first letter of the alphabet")
    
case "z":
    print("The last letter of the alphabet")
    
default:
    print("Some other character")
}


// 匹配多个值
let anotherCharacter: Character = "a"
switch anotherCharacter {
case "a", "A":
    print("The letter A")
default:
    print("Not the letter A")
}


// 匹配区间
let approximateCount = 62
let countedThings = "moons orbiting Saturn"
let naturalCount: String
switch approximateCount {
case 0:
    naturalCount = "no"
    
case 1..<5:
    naturalCount = "a few"
    
case 5..<12:
    naturalCount = "several"
    
case 12..<100:
    naturalCount = "dozens of"
    
case 100..<1000:
    naturalCount = "hundreds of"
    
default:
    naturalCount = "many"
}
print("There are \(naturalCount) \(countedThings)")


// 使用元组特性匹配
let somePoint = (1, 0)
switch somePoint {
case (0, 0):
    print("(0, 0) is at the origin")
    
case (_, 0):
    print("(\(somePoint.0), 0) is on the x-axis")
    
case (0, _):
    print("(0, \(somePoint.1)) is on the y-axis")
    
case (-2...2, -2...2):
    print("(\(somePoint.0), \(somePoint.1)) is inside the box")
    
default:
    print("(\(somePoint.0), \(somePoint.1)) is outside the box")
}

// 值绑定
let anotherPoint = (-2, 2)
switch anotherPoint {
case (let x, 0):
    print("on the x-axis with an x value of \(x)")
    
case (0, let y):
    print("on the y-axis with a y value of \(y)")
    
case (let x, let y): // case let (x, y):
    print("somewhere else at (\(x), \(y))")
    
// 这里包含了所有的情况，所以不需要default了，swift编译器牛逼的地方
}


// where分句, switch条件判断必须要全面
let yetAnotherPoint = (10, 10)
switch yetAnotherPoint {
case let (x, y) where x == y:
    print("(\(x), \(y)) is on the line x == y")

case let (x, y) where x == -y:
    print("(\(x), \(y)) is on the line x == -y")
    
case let (x, y):
    print("(\(x), \(y)) is just some arbitrary point")
}



// 符合情况
// 多个测试条件共享一个函数体，可以通过复合多个模式来搞，只要一个模式匹配，那么这个情况就会被认为是匹配的。如果模式太长，可以把他们写成多行
someCharacter = "冯"
switch someCharacter {
case "a", "e", "i", "o", "u":
    print("\(someCharacter) is a vowel")
    
    case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",
         "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":
    print("\(someCharacter) is a consonant")
    
default:
    print("\(someCharacter) is not a vowel or a consonant")
}


// 控制转移语句
//continue

let puzzleInput = "great minds thinks alike"
var puzzleOutput = ""
for character in puzzleInput.characters {
    switch character {
    case "a", "e", "i", "o", "u", " ":
        continue
    
    default:
        puzzleOutput.append(character)
    }
}
print(puzzleOutput)



// 循环语句中的break
for i in 1..<5 {
    print(i)
    if i == 3 {
        break
    }
}


// switch与距离的break
let numberSymbol: Character = "๔"
var possibleIntegerValue: Int?
switch numberSymbol {
case "1", "一", "١", "๑":
    possibleIntegerValue = 1
    
case "2", "二", "٢", "๒":
    possibleIntegerValue = 2
    
case "3", "三", "٣", "๓":
    possibleIntegerValue = 3
    
case "4", "四", "٤", "๔":
    possibleIntegerValue = 4
    
default:
    break
}
if let integerValue = possibleIntegerValue {
    print("The integer value of \(numberSymbol) is \(integerValue)")
} else {
    print("An integer value could not be found for \(numberSymbol)")
}


// fallthrough
let integerToDescribe = 6
var description = "The number \(integerToDescribe) is"
switch integerToDescribe {
case 2, 3, 5, 7, 11, 13, 17, 19:
    description += " a prime number, and also"
    fallthrough
default:
    description += " an integer"
}
print(description)

// 给语句打标签
square = 0
diceRoll = 0
step = 0

gameLoop: while square != finalSquare {
    diceRoll = Int(arc4random_uniform(7))
    step += 1
    switch square + diceRoll {
    case finalSquare:
        break gameLoop
        
    case let newSquare where newSquare > finalSquare:
        continue gameLoop
        
    default:
        square += diceRoll
        square += board[square]
    }
}
print("Game over! Step is \(step)")




// 提前退出guard
func greet(person: [String: String]) {
    guard let name = person["name"] else {
        print("xxx")
        return
    }
    
    print("Hello \(name)!")
    
    guard let location = person["location"] else {
        print("I hope the weather is nice near you.")
        return
    }
    
    print("I hope the weather is nice in \(location)")
}

greet(person: ["name": "John"])
//greet(person: ["ky": "sdfsf"])
greet(person: ["name": "Jane", "location": "Cupertino"])
greet(person: ["sdfsdfs": "Jane", "location": "Cupertino"])













