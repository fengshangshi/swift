


// 类型转换

// 类型转换可以判断实例的类型，也可以将该实例在其所在的类层次中视为其父类或子
// swift中类型转换的实现为is和as操作符，这两个操作符使用了一种简单传神的方式来检查一个值的类型或将某个值转换为另一种类型

// 为类型转换定义类层次
class MediaItem {
    var name: String
    init(name: String) {
        self.name = name
    }
}

class Movie: MediaItem {
    var director: String
    init(name: String, director: String) {
        self.director = director
        super.init(name: name)
    }
}

class Song: MediaItem {
    var artist: String
    init(name: String, artist: String) {
        self.artist = artist
        super.init(name: name)
    }
}


// 下面定义的library有意思，有两个Movie实例，三个Song实例，swift的类型检查器能够推断出Movie和Song实例有一个共同的父类MediaItem，因此library的类型推断为[MediaItem]
// 事实上library存储的项目在后台依旧是Movie和Song实例，总之，如果遍历这个数组的内容，取出的项目将会是MediaItem类型而非Movie或Song类型，为了使用它们的原生类型，需要检查它们的类型或将他们向下转换为不同的类型
let library = [
    Movie(name: "Casablanca", director: "Michael Curtiz"),
    Song(name: "Blue Suede Shoes", artist: "Elvis Presley"),
    Movie(name: "Citizen Kane", director: "Orson Welles"),
    Song(name: "The One And Only", artist: "Chesney Hawkes"),
    Song(name: "Never Gonna Give You Up", artist: "Rick Astley"),
]
library[0] is Movie
library[1] is Song

// 类型检查
// is 使用类型检查符来检查一个实例是否属于一个特定的子类，如果实例是该子类类型，类型检查操作符返回true，否则返回false
var movieCount = 0
var songCount = 0

for item in library {
    if item is Movie {
        movieCount += 1
    } else if item is Song {
        songCount += 1
    }
}
//print("Media library contains \(movieCount) movies and \(songCount) songs")


// 向下类型转换
/*
 某个类类型的常量或变量可能实际上在后台引用其一个子类的实例，当遇到这种情况时可以尝试使用类型转换操作符(as?或as!）将它向下类型转换至其子类类型。
 由于向下类型转换可能失败，类型转换操作符就有了两个不同形式，as?(条件形式,返回一个可选值), as!(强制形式，向下类型转换并强制展开)
 如果不确定向下转换类型会成功，就使用条件形式as?，如果确信向下转换类型会成功时，使用强制形式as!，当向下转换出现错误时，强制形式的类型转换会出发一个运行错误
 */

for item in library {
    if let movie = item as? Movie {
        print("Movie: '\(movie.name)', dir. \(movie.director)")
    } else if let song = item as? Song {
        print("Song: '\(song.name)', dir. \(song.artist)")
    }
}

// Any和AnyObject的类型转换
//swift为不确定的类型提供了两种特殊的类型别名：
/*
 1、AnyObject 可以表示任何类型的实例
 2、Any 可以表示任何类型，包括函数类型
 
 只有当你确切需要使用它们的功能和行为时再使用Any和AnyObject，在写代码时使用更加明确的类型表达总要好一些。
 */

var things = [Any]()
things.append(0)
things.append(0.0)
things.append(42)
things.append(3.14159)
things.append(-12.345)
things.append("Hello")
things.append((3.0, 5.0))
things.append(Movie(name: "Ghostbusters", director: "Ivan Reitman"))
things.append({(name: String) -> String in "Hello, \(name)"})

// 你可以在switch结构的case中使用is和as操作符找出已知Any或AnyObject类型的常量或变量的具体类型。
// case中由上往下的顺序条件：越个性的越在上面，越一般的放在最后。
for thing in things {
    switch thing {
    case 0 as Int: // 转换为int
        print("zero as an Int")
        
    case 0 as Double: // 转换为Double
        print("zero as a Double")
        
    case let someInt as Int:
        print("an integer value of \(someInt)")
        
    case let someDouble as Double where someDouble > 0:
        print("a positive double value of \(someDouble)")
        
    case is Double:
        print("some other double value that I don't want to print")
        
    case let someString as String:
        print("a string value of \"\(someString)\"")
        
    case let (x, y) as (Double, Double):
        print("an (x, y) point at \(x), \(y)")
        
    case let movie as Movie:
        print("a movie called '\(movie.name), dir. \(movie.director)")
        
    case let stringConverter as (String) -> String:
        print(stringConverter("Michael")) // 这些地方感觉swift好强大。
        
    default:
        print("something else")
    }
}



// Any类型表示了任意类型的值，包括可选类型。如果你给显式声明的Any类型使用可选项，swift就会发出警告，如果你真心需要在Any值中使用可选项，如下所示，你可以使用as运算符来显式的转换可选项为Any。
let optionalNumber: Int? = 3
//things.append(optionalNumber) // warning
things.append(optionalNumber as Any)





















