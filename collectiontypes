
var someInts = [Int]()
someInts.append(3)

someInts = []

// 创建一个带有默认值的数组
var threeDoubles = Array(repeating: 0.0, count: 3)


// 通过两个数组相加创建一个数组
var anotherThreeDoubles = Array(repeating: 2.5, count: 3)
var sixDoubles = threeDoubles + anotherThreeDoubles


// 用字面量构造数组
var shoppingList = ["Eggs", "Milk"]

// count
print("The shopping list contains \(shoppingList.count) items.")

// isEmpty
if shoppingList.isEmpty {
    print("The shopping list is empty.")
} else {
    print("The shopping list is not empty.")
}

// method: append(_:)
shoppingList.append("Flour")

// 使用加法赋值运算符
shoppingList += ["Baking Powder"]
shoppingList += ["Chocolate Spread", "Cheese", "Butter"]

var firstItem = shoppingList[0]
shoppingList[0] = "Six eggs"
//shoppingList = "Six eggs
//firstItem = "eggs"
//shoppingList

shoppingList[4...6] = ["Bananas", "Apples"]
shoppingList

shoppingList.insert("Maple Syrup", at: 0)

// 删除
let mapleSyrup = shoppingList.remove(at: 0)
firstItem = shoppingList[0]

let apples = shoppingList.removeLast()
shoppingList


// 遍历
for item in shoppingList {
    print(item)
}

// 同时使用值和索引值
for (index, value) in shoppingList.enumerated() {
    print("Item \(index + 1): \(value)")
}




// 集合
var letters = Set<Character>()
print("letters is of type Set<Character> with \(letters.count) items.")

letters.insert("a")
letters.insert("b")
letters
letters = []


// 用数组字面量创建集合
//var favoriteGenres: Set<String> = ["Rock", "Classical", "Hip hop", ]
var favoriteGenres: Set = ["Rock", "Classical", "Hip hop", ]

// count
print("I have \(favoriteGenres.count) favorite music genres.")

// isEmpty
if favoriteGenres.isEmpty {
    print("As far as music goes, I'm not picky.")
} else {
    print("I have particular music preferences.")
}

// insert
favoriteGenres.insert("Jazz")

// remove
if let removedGenre = favoriteGenres.remove("=r") {
    print("\(removedGenre)? I'm over it.")
} else {
    print("I never much cared for that.")
}

// contains
if favoriteGenres.contains("Classical") {
    print("I get up on the good foot.")
} else {
    print("It's too funky in here.")
}

// for in
for genre in favoriteGenres {
    print(genre)
}

// sorted
for genre in favoriteGenres.sorted() {
    print("\(genre)")
}

// 集合操作

// intersection
let oddDigits: Set = [1, 3, 5, 7, 9]
let evenDigits: Set = [0, 2, 4, 6, 8]
let singleDigitPrimeNumbers: Set = [2, 3, 5, 7]

//oddDigits.sorted()
// union 合并，去掉重复的
oddDigits.union(evenDigits).sorted()
//oddDigits

// intersection交集
oddDigits.intersection(evenDigits).sorted()

// subtracting a集合不在b集合中的值生成集合
oddDigits.subtracting(singleDigitPrimeNumbers).sorted()
oddDigits.subtracting(evenDigits).sorted()
evenDigits.subtracting(singleDigitPrimeNumbers).sorted()

// 补集，交集的相反
oddDigits.symmetricDifference(singleDigitPrimeNumbers).sorted()




// 集合成员关系和相等

let houseAnimals: Set = ["🐶", "🐱"]
let farmAnimals: Set = ["🐮", "🐔", "🐑", "🐶", "🐱"]
let cityAnimals: Set = ["🐦", "🐭"]

// == 集合比较
houseAnimals == cityAnimals

// isSubset a集合是否被b集合包含
houseAnimals.isSubset(of: farmAnimals)

// isSuperset a集合是否包含b集合
farmAnimals.isSuperset(of: houseAnimals)

// isDisjoint 是否没有交集
farmAnimals.isDisjoint(with: cityAnimals)


// isStrictSubset 是否为子集合
houseAnimals.isStrictSubset(of: farmAnimals)

// isStrictSuperset 是否为父集合
farmAnimals.isStrictSuperset(of: houseAnimals)




// 字典

// 空字典
var namesOfIntegers = [Int: String]()
namesOfIntegers[16] = "sixteen"
namesOfIntegers = [:]

// 用字典字面量创建字典
//var airports: [String: String] = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]
var airports = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]

// count
print("The dictionary of airports contains \(airports.count) items.")

// isEmpty
if airports.isEmpty {
    print("The airports dictionary is empty.")
} else {
    print("The airports dictionary is not empty.")
}

airports["LHR"] = "London"
airports["LHR"] = "London Heathrow"

// updateValue
airports.updateValue("Canada", forKey: "YOW")
let ottawa = airports.updateValue("Ottawa", forKey: "YOW")


if let montreal = airports.updateValue("Montreal", forKey: "YMQ") {
    print("The old value for YMQ was \(montreal)")
}
airports
if let montreal = airports.updateValue("Montreal1", forKey: "YMQ") {
    print("The old value for YMQ was \(montreal)")
}

// 通过下标方法，判断是否存在
if let airportName = airports["aDUB"] {
    print("The name of the airport is \(airportName)")
} else {
    print("That airport is not in the airports dictionary.")
}

// 使用给某个键的对应值赋值为nil来从字典里删除一个键值对
airports["APL"] = "Apple Internation"
airports

airports["APL"] = nil
airports

// removeValue 不存在返回nil，存在返回被移除的值
if let removedValue = airports.removeValue(forKey: "DUB") {
    print("The removed airport's name is \(removedValue)")
} else {
    print("The airports dictionary does not contain a value for DUB")
}

// 字典遍历
for (airportCode, airportName) in airports {
    print("\(airportCode): \(airportName)")
}


// keys
for airportCode in airports.keys {
    print("Airport code: \(airportCode)")
}

// values
for airportName in airports.values {
    print("Airport name: \(airportName)")
}

let airportCodes = [String](airports.keys)
let airportNames = [String](airports.values)





















