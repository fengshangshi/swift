

// 下标
// subscript定义语法
/*
subscript(index: Int) -> Int {
    get { // 读
        
    }
    
    set { // 写
        
    }
}
 */

// 使用subscript实现的整数的n倍表
struct TimesTable {
    let multiplier: Int
    subscript(index: Int) -> Int {
        return multiplier * index
    }
}
let threeTimesTable = TimesTable(multiplier: 3)
print("six times three is \(threeTimesTable[6])")


// 下标的用法
/*
 下标确切的意思取决于它使用的上下文，通常下标是用来访问集合（set）、列表或序列中元素的快捷方式，也可以在自己特定的类或结构体中自由实现下标来提供合适的功能
 swift的Dictionary类型实现了下标来对Dictionary实例中存放的值进行设置和读取操作。
 可以在小标的方括号中通过提供字典键类型相同的键来设置字典里的值，并且把一个与字典类型相同的值赋给这个下标
 */
var numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]
numberOfLegs["bird"] = 2
var birdLegs = numberOfLegs["bird"]



// 下标选项
// Matrix结构体，下标接收两个整数形式参数
struct Matrix {
    let rows: Int, columns: Int
    var grid: [Double]
    
    init(rows: Int, columns: Int) {
        self.rows = rows
        self.columns = columns
        grid = Array(repeating: 0.0, count: rows * columns)
    }
    
    func indexIsValid(row: Int, column: Int) -> Bool {
        return row >= 0 && row < rows && column >= 0 && column < columns
    }
    
    subscript(row: Int, column: Int) -> Double {
        get {
            assert(indexIsValid(row: row, column: column), "索引越界")
            return grid[(row * columns) + column]
        }
        
        set {
            assert(indexIsValid(row: row, column: column), "索引越界")
            grid[(row * columns) + column] = newValue
        }
    }
}

var matrix = Matrix(rows: 2, columns: 2)
matrix[0, 1] = 1.5
matrix[1, 0] = 3.2

var someValue = matrix[0, 1]
matrix[1, 1] = 33
matrix.grid















