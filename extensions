
// 扩展
// 扩展：是为现有的类、结构体、枚举类型、或协议添加新功能提供了机制。
/* swift中的扩展可以:
 1、添加实例计算属性和类计算属性
 2、定义实例方法和类型方法
 3、提供新初始化器
 4、定义下标
 5、定义和使用新内嵌类型
 6、使现有的类型遵循某协议
 
 也可以扩展一个协议，以提供其要求的实现或添加符合类型的附加功能
 */

class SomeType {
    
}

// 扩展语法
extension SomeType {
    
}

// 扩展可以使已有的类型遵循一个或多个协议，在这种情况下，协议名的书写方式与类或结构体完全一样
//extension SomeType: SomeProtocol, AnotherProtocol {
//    
//}

// 计算属性
extension Double {
    var m: Double { return self }
    var km: Double { return self * 1_000.0 }
    var cm: Double { return self / 100.0 }
    var mm: Double { return self / 1_000.0 }
    var ft: Double { return self / 3.28084 }
}
let oneInch = 25.4.mm
print("One inch is \(oneInch) meters")

let threeFeet = 3.ft
print("Three feet is \(threeFeet) meters")

// 初始化器
/*
 扩展可向已有的类型添加新的初始化器，这允许你扩展其他类型以使初始化器接受你的自定义类型作为形式参数，或提供该类型的原始视线中未包含的额外初始化选项
 扩展能为类添加新的便捷初始化器，但是不能为类添加指定初始化器或反初始化器，指定初始化器和反初始化器必须由原来类的实现提供。
 */
struct Size {
    var width = 0.0, height = 0.0
}

struct Point {
    var x = 0.0, y = 0.0
}
struct Rect {
    var origin = Point()
    var size = Size()
}

let defaultRect = Rect()
let memberwiseRect = Rect(origin: Point(x: 2.0, y: 2.0), size: Size(width: 5.0, height: 5.0))

// 扩展额外提供一组初始化器
extension Rect {
    init(center: Point, size: Size) {
        let originX = center.x - (size.width / 2)
        let originY = center.y - (size.height / 2)
        self.init(origin: Point(x: originX, y: originY), size: size)
    }
}
// 这个初始化器首先基于提供的center点和size计算出合适的原点，然后初始化器调用该结构体的自动成员初始化器init(origin:size:)，这样就将新的原点和大小值保存在了对应的属性中
let centerRect = Rect(center: Point(x: 4.0, y: 4.0), size: Size(width: 3.0, height: 3.0))


// 方法
// 扩展可以为已有的类型添加新的实例方法和类型方法
extension Int {
    func repetitions(task: () -> Void) {
        for _ in 0..<self {
            task()
        }
    }
}

3.repetitions {
    print("Hello")
}
3.repetitions {
    print("Goodbye!")
}

// 异变实例方法
// 结构体和枚举类型方法在修改self或本身属性时必须标记实例方法为mutating
extension Int {
    mutating func square() {
        self = self * self
    }
}

var someInt = 3
someInt.square()
someInt

// 下标
extension Int {
    subscript(digitIndex: Int) -> Int {
        var decimalBase = 1
        for _ in 0..<digitIndex {
            decimalBase *= 10
        }
        return (self / decimalBase) % 10
    }
}
7435353[0]
2342342342342[1]
2342342[3]
234[4]

// 内嵌类型-扩展可以为已有的类、结构体和枚举类型添加新的内嵌类型
extension Int {
    enum Kind {
        case negative, zero, positive
    }
    
    var kind: Kind {
        switch self {
        case 0:
            return .zero
        case let x where x > 0:
            return .positive
        default:
            return .negative
        }
    }
}

func printIntegerKinds(_ numbers: [Int]) {
    for number in numbers {
        switch number.kind {
        case .negative:
            print("- ", terminator: "")
        case .zero:
            print("0 ", terminator: "")
        case .positive:
            print("+ ", terminator: "")
        }
    }
    print("")
}
printIntegerKinds([3, 19, -27, 0, -6, 0, 7])


















