

// 闭包
// 闭包是可以在代码中被传递和被引用的功能性独立的代码模块，类似于JS中的匿名函数
// 闭包能够捕获和存储定义在其上下文中的任何变量和变量的引用，这也就是所谓的闭合和包裹那些常量和变量，因此被称为闭包，swift能够处理所有关于捕获的内存管理的操作

// 全局函数和内嵌函数，实际上就是特殊的闭包
// 闭包符合如下三种形式中的一种：
/*
 * 全局函数是一个有名字但不会捕获任何值的闭包
 * 内嵌函数是一个有名字且能从其上层函数捕获值的闭包
 * 闭包表达式是一个轻量级语法所写的，可以捕获其上下文常量或变量值的没有名字的闭包
 */

// 闭包常见的优化包括：
/*
 * 利用上下文推断形式参数和返回值的类型
 * 单表达式的闭包可以隐式返回
 * 简写实际参数名
 * 尾随闭包语法
 */

// 闭包表达式

// sorted(by:)
let names = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]

// 1 普通排序函数
func backward(_ s1: String, _ s2: String) -> Bool {
    return s1 > s2 // 如果s1要出现在s2之前，s1 > s2需要返回true
}
var reversedNames = names.sorted(by: backward)
"df" > "de"
"E" > "F"
"Tom" > "Tim"

// 2 闭包表达式
reversedNames = names.sorted(by: { (s1: String, s2: String) -> Bool in // 闭包的函数整体部分由关键字in导入，这个关键字表示闭包的形式参数类型和返回类型定义已经完成，并且闭包的函数体即将开始
    return s1 > s2
})

// 如果闭包函数体如果很短，可以写成一行
reversedNames = names.sorted(by: { (s1: String, s2: String) -> Bool in return s1 > s2 } )
reversedNames


// 闭包的形参类型可以从语境中被推断出来
reversedNames = names.sorted(by: { s1, s2 in return s1 > s2 }) // 当闭包被当做函数的实际参数是都不需要用完整格式来书写行内闭包
//reversedNames = names.sorted(by: { (s1, s2) in return s1 > s2 })
reversedNames

//reversedNames = names.sorted()


// 从单表达式闭包隐式返回
reversedNames = names.sorted(by: {s1, s2 in s1 > s2})


// 简写的实际参数名
// swift自动对行内闭包提供简写实际参数名，可以通过$0, $1, $2等名字来引用闭包的实际参数值
// 如果在闭包表达式中使用这些简写的实际参数名，那么就可以在闭包的实际参数列表中忽略对其的定义，并且简写实际参数名的数字和类型将会从期望的函数类型中推断出来。in关键字也可以被省略
reversedNames = names.sorted(by: { $0 > $1 }) // $0, $1分别是闭包的第一个和第二个String的实际参数


// 运算符函数
reversedNames = names.sorted(by: <)
reversedNames = names.sorted(by: >) // swift的String类型定义了关于大于号的特定字符串实现，让其作为一个有两个String类型形式参数的函数并返回Bool类型的值


// 尾随闭包
reversedNames = names.sorted {(s1, s2) in return s1 > s2 }
reversedNames = names.sorted {$0 > $1}

let digitNames = [
    0: "Zero", 1: "One", 2: "Two", 3: "Three", 4: "Four",
    5: "Five", 6: "Six", 7: "Seven", 8: "Eight", 9: "Nine",
]
let numbers = [16, 58, 510]


/*
 // 这里其实是
 let strings = numbers.map({
    (number) -> String in // 闭包使用
 
    xxxxx
 })
 */
// 尾随闭包，如果map只需要一个实际参数是闭包，可以将map的调用去掉后面的圆括号
let strings = numbers.map {
    number -> String in

    var number = number, output = ""
    repeat {
        let digitName = digitNames[number % 10]! // 用key获取字典值返回一个optional类型的值，这里可以保证都存在值，所以直接用叹号进行强制展开值
        output = digitName + output
        number /= 10
    } while number > 0
    
    return output
}

//var a = 1
//a /= 10
//a

1%10
1/10





// 捕获值
// 一个闭包能够从上下文捕获已被定义的常量和变量。即使定义这些常量和变量的原作用域已经不存在，闭包仍能够在其函数体内引用和修改这些值
// 在swift中，一个能够捕获值的闭包最简单的模型就是内嵌函数，即被书写在另一个函数的内部。一个内嵌函数能够捕获外部函数的实际参数并且能够捕获任何在外部函数的内部定义了的常量和变量

func makeIncrementer(forIncrement amount: Int) -> () -> Int {
    var runningTotal = 0
    func incrementer() -> Int {
        runningTotal += amount
        return runningTotal
    }
    return incrementer
}


let incrementByTen = makeIncrementer(forIncrement: 10)
incrementByTen()
incrementByTen()
incrementByTen()

let incrementBySeven = makeIncrementer(forIncrement: 7)
incrementBySeven()

incrementByTen()
incrementBySeven()


// 闭包是引用类型
let alsoIncrementByTen = incrementByTen
alsoIncrementByTen()


// 逃逸闭包 搞不懂，后续继续看实际应用场景
var completionHandlers: [() -> Void] = []
func someFunctionWithEscapingClosure(completionHandler: @escaping () -> Void) {
    completionHandlers.append(completionHandler)
}
completionHandlers

func someFunctionWidthNonescapingClosure(closure: () -> Void) {
    closure()
}

class SomeClass {
    var x = 10
    func doSomething() {
        someFunctionWithEscapingClosure { self.x = 100 }
        someFunctionWidthNonescapingClosure { x = 200 }
    }
}

let instance = SomeClass()
instance.doSomething()
print(instance.x)

completionHandlers
completionHandlers.first?()
print(instance.x)


// 自动闭包 没搞懂





















